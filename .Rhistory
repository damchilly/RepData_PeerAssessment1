content(req)
gtoken
library(httpuv)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "8e432edc7816d0dda3ca",
secret = "28f0f3926b366333f434542cda179028f2acc2c2")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
myapp <- oauth_app("github",
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "8e432edc7816d0dda3ca",
secret = "28f0f3926b366333f434542cda179028f2acc2c2")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
library(httpuv)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "8e432edc7816d0dda3ca",
secret = "28f0f3926b366333f434542cda179028f2acc2c2")
myapp <- oauth_app("github",
key = "8e432edc7816d0dda3ca",
secret = "21d5ab0c1e4c375988ad8dfa81be4d86815f4b04")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
library(httpuv)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "8e432edc7816d0dda3ca",
secret = "26335397de9f8bd6d9fe8636438da6e90b1380ad")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req
content(req)
head(content(req))
head(content(req),1000)
head(content(req),10000)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
install.packages("jsonlite")
library(jsonlite)
json2 = jsonlite::fromJSON(toJSON(json1))
json2
json2[1,1:5]
head(json2)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readlines(con)
?readlines
?readLines
htmlCode = readLines(con)
close(con)
htmlCode
?nchar
?readLines
htmlCode[10]
nchar(htmlCode[10])
c(nchar(htmlCode[10]),nchar(htmlCode[20]),nchar(htmlCode[30]),nchar(htmlCode[40]))
c(nchar(htmlCode[10]),nchar(htmlCode[20]),nchar(htmlCode[30]),nchar(htmlCode[100]))
swirl()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
?arrange
?desc
top_counts <- filter(pack_sum, count>679)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
?mutate
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -sex)
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate()
info(separate)
info()
?separate
res %>% separate(sex_class, c("sex","class"))
separate(res, sex_class, c("sex","class"))
submit()
submit()
submit()
submit()
source('/var/folders/1n/mr6j4bwn6y10gb58l1d9ng0h0000gn/T//RtmpQcxeWu/script1.R')
source('/var/folders/1n/mr6j4bwn6y10gb58l1d9ng0h0000gn/T//RtmpQcxeWu/script1.R')
submit()
students3
submit()
source('/var/folders/1n/mr6j4bwn6y10gb58l1d9ng0h0000gn/T//RtmpQcxeWu/script2.R')
source('/var/folders/1n/mr6j4bwn6y10gb58l1d9ng0h0000gn/T//RtmpQcxeWu/script2.R')
submit()
?spread
submit()
source('/var/folders/1n/mr6j4bwn6y10gb58l1d9ng0h0000gn/T//RtmpQcxeWu/script3.R')
submit()
source('/var/folders/1n/mr6j4bwn6y10gb58l1d9ng0h0000gn/T//RtmpQcxeWu/script3.R')
submit()
source('/var/folders/1n/mr6j4bwn6y10gb58l1d9ng0h0000gn/T//RtmpQcxeWu/script3.R')
submit()
source('/var/folders/1n/mr6j4bwn6y10gb58l1d9ng0h0000gn/T//RtmpQcxeWu/script3.R')
source('/var/folders/1n/mr6j4bwn6y10gb58l1d9ng0h0000gn/T//RtmpQcxeWu/script3.R')
View(students3)
source('/var/folders/1n/mr6j4bwn6y10gb58l1d9ng0h0000gn/T//RtmpQcxeWu/script3.R')
source('/var/folders/1n/mr6j4bwn6y10gb58l1d9ng0h0000gn/T//RtmpQcxeWu/script3.R')
source('/var/folders/1n/mr6j4bwn6y10gb58l1d9ng0h0000gn/T//RtmpQcxeWu/script3.R')
source('/var/folders/1n/mr6j4bwn6y10gb58l1d9ng0h0000gn/T//RtmpQcxeWu/script3.R')
spread(students3,test)
spread(students3,test,c(midterm,final))
spread(students3,test,midterm)
spread(students3,test,midterm,final)
spread(students3,test,(midterm,final))
spread(students3,midterm,final, test)
spread(students3,test, midterm:final)
spread(students3,test, test1)
spread(students3,test,test1, test2)
spread(students3,test,a)
spread(students3,test)
spread(students3,test, grade)
spread(students3,test,class,grade)
spread(students3,test,class)
spread(students3,class,test)
play()
View(students3)
library(dplyr)
stocks <- data.frame( time=as.date('2009-01-01' + 0:9, X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)))
stocks <- data.frame( time=as.date('2009-01-01') + 0:9, X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4))
stocks <- data.frame( time=as.Date('2009-01-01') + 0:9, X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4))
stocks
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
stocksm %>% spread(stock,price)
stocksm %>% spread(time,price)
nxt()
spread(students3,test,class1:class5)
students3
gather(students3,class, grade, class1:class5, na.rm = TRUE)
spread(students3, test, class)
play()
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
stocksm %>% spread(stock, price)
?gather
stocks
next()
students3 %>%
gather(class,class1:class5, -grade, na.rm = TRUE)
students3 %>% gather(class, class1:class5, -grade, na.rm = TRUE)
students3 %>% gather(class, grade, class1:class5, na.rm = TRUE)
x <- students3 %>%
gather(class,class1:class5, -grade, na.rm = TRUE)
tb<- students3 %>% gather(class, grade, class1:class5, na.rm = TRUE)
tb
spread(tb,test,class)
spread(tb,class,test)
spread(tb,test,clase)
spread(tb,test,grade)
source('/var/folders/1n/mr6j4bwn6y10gb58l1d9ng0h0000gn/T//RtmpQcxeWu/script3.R')
students3 %>%
gather(class,class1:class5, -grade, na.rm = TRUE) %>%
spread(test,grade)
students3
students3 %>%
gather(class,class1:class5, -grade, na.rm = TRUE)
students3 %>% gather(class,class1:class5, -grade, na.rm = TRUE)
gather(students3, class,grade, class1:class5, na.rm = TRUE)
source('/var/folders/1n/mr6j4bwn6y10gb58l1d9ng0h0000gn/T//RtmpQcxeWu/script3.R')
spread(test,grade)
students3 %>%
gather(class,grade, class1:class5, na.rm = TRUE)
tb <- students3 %>% gather(class,grade, class1:class5, na.rm = TRUE)
tb
spread(test,class)
spread(tb, test,class)
spread(tb,test,grade)
students3 %>%
gather(class,grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade)
print
play()
nxt()
source('/var/folders/1n/mr6j4bwn6y10gb58l1d9ng0h0000gn/T//RtmpQcxeWu/script3.R')
submit()
source('/var/folders/1n/mr6j4bwn6y10gb58l1d9ng0h0000gn/T//RtmpQcxeWu/script3.R')
submit()
students3 %>%
gather(class,grade, class1:class5, na.rm = TRUE) %>%
spread(test,grade)
print
students3 %>%
gather(class,grade, class1:class5, na.rm = TRUE)
tb<-students3 %>%
gather(class,grade, class1:class5, na.rm = TRUE)
tb
spread(tb,test,grade)
source('/var/folders/1n/mr6j4bwn6y10gb58l1d9ng0h0000gn/T//RtmpQcxeWu/script3.R')
submit()
source('/var/folders/1n/mr6j4bwn6y10gb58l1d9ng0h0000gn/T//RtmpQcxeWu/script3.R')
submit()
students3 %>%
gather(class,grade, class1:class5, na.rm = TRUE) %>%
spread(test,grade)
print
source('/var/folders/1n/mr6j4bwn6y10gb58l1d9ng0h0000gn/T//RtmpQcxeWu/script3.R')
submit()
extraxt_numeric("class5")
extract_numeric("class5")
?mutate
mutate(class = extract_numeric(class)) %>%
source('/var/folders/1n/mr6j4bwn6y10gb58l1d9ng0h0000gn/T//RtmpQcxeWu/script4.R')
submit()
pwd
dir()
students4
students4
submit()
submit()
student_info
unique(id,name,sex)
?unique
unique()
si <- student_info
si
siu <- unique(id)
?select
?unique
select(id) %>%
select(id) %>%
unique(id) %>%
student_info <- students4 %>%
select(id) %>% unique(id) %>%
print
print
submit()
students4
submit()
passed
failed
mutate(passed, status="passed")
passed <- passed%>% mutate(status="passed")
failed <- failed %>% mutate(status="failed")
library(dplyr)
packageVersion(dplyr)
play()
packageVersion(dplyr)
library(dplyr)
next()
nxt()
?bind_rows
bind_rows(passed,failed)
sat
?select
?separate
submit()
submit()
?group_by
) %>% print
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day <- today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label=TRUE)
now()
this_moment <-now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
my_date <- ymd("1989 May 17")
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("25081985")
ymd("192012")
ymd("1920/1/2")
dt1
ymds_hms(dt1)
ymd_hms(dt1)
info()
bye()
# UT Data visualization - Code Example from Predictive Analysis for Dummies Chapter 14 p.258
# UT Data visualization - Code Example from Predictive Analysis for Dummies Chapter 14 p.258
#
setwd("~/Documents/UT DATA VISUALIZATION")
autofile <- "auto-mpg-data.txt"
autos <- read.table(autofile,header= FALSE,as.is=TRUE)
# data.frame: 412 obs. 30 variables on 06/03/2015
#Renaming columns
colnames(autos) <-c("mpg","cylinders","displacement","horsepower","weight","acceleration","modelYear","origin","carName")
#Converting data type of horsepower to numeric
autos$horsepower <- as.numeric(autos$horsepower)
#Replacing missing values with column mean
autos$horsepower[is.na(autos$horsepower)] <- mean(autos2$horsepower,na.rm=TRUE)
#Change attributes types
autos$origin <- factor(autos$origin)
autos$modelYear <- factor(autos$modelYear)
autos$cylinders <- factor(autos$cylinders)
#Remove car name attribute
autos$carName <-NULL
#Create predictive model
#Splitting Data set for 70/30 - 70% Training dataset & 30% Test dataset
trainSize <- round(nrow(autos)*0.7)
testSize <- nrow(autos)- trainSize
# trainSize = 279 - testSize = 119
#Create a Random Training Set
set.seed(123)
training_indices <- sample(seq_len(nrow(autos)), size=trainSize)
trainSet <- autos[training_indices,]
testSet <- autos[-training_indices,]
#
# The training set contains 279 observations, along with the outcome (mpg)
# of each observation. The regession algorithm uses the outcome to train the
# model by looking at the relationships between the predictor variables
# (any of the seven attributes) and the response variable (mpg)
# Creates a linear regression model that uses the mpg attribute as the
# response variable and all the other variables as predictor variables
#
model <-lm(formula=trainSet$mpg~.,data=trainSet)
# Multiple R-squared tells how well the regression fits the data (goodness of fit)
# A value of 1 means that's a perfect fit.So an r-squared value of 0.874
# is good; it says that 87.4 percent of the variability is explained by
# the model.
#p-value tells you how significant the predictor variables affect
# the response variable
setwd("~/Documents/COURSERAReproducible/RepData_PeerAssessment1")
title: "Reproducible Research: Peer Assessment 1"
# output:
## keep_md: true
## title: "Reproducible Research: Peer Assessment 1"
## output:
## html_document:
## keep_md: true
## Setting the Environment
library(knitr)
opts_chunk$set(echo = TRUE, results = 'hold')
library(data.table)
library(ggplot2)
setwd("~/Documents/COURSERAReproducible/RepData_PeerAssessment1")
## Loading and preprocessing the data
rdata <- read.csv('activity.csv', header = TRUE, sep = ",",
colClasses=c("numeric", "character", "numeric"))
# Convert date field format and interval to factor
rdata$date <- as.Date(rdata$date, format = "%Y-%m-%d")
rdata$interval <- as.factor(rdata$interval)
str(rdata)
steps_per_day <- aggregate(steps ~ date, rdata, sum)
colnames(steps_per_day) <- c("date","steps")
head(steps_per_day)
ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "green", binwidth = 1000) +
labs(title="Histogram of Steps Taken per Day",
x = "Number of Steps per Day", y = "Number of times in a day(Count)") + theme_bw()
ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "sky blue", binwidth = 1000) +
labs(title="Steps Taken per Day",
x = "Steps per Day", y = "Number of 5-min intervals per day") + theme_bw()
geom_histogram(fill = "sky blue", binwidth = 100) +
labs(title="Steps Taken per Day",
x = "Steps per Day", y = "Number of 5-min intervals per day") + theme_bw()
ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "sky blue", binwidth = 1000) +
labs(title="Histogram of Steps Taken per Day",
x = "Number of Steps per Day", y = "Number of times in a day(Count)") + theme_bw()
ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "sky blue", binwidth = 100) +
labs(title="Histogram of Steps Taken per Day",
x = "Number of Steps per Day", y = "Number of times in a day(Count)") + theme_bw()
ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "sky blue", binwidth = 1000) +
labs(title="Steps Taken per Day",
x = "Steps per Day", y = "Intervals per day") + theme_bw()
hist(steps_per_day, main = "Total steps by day", xlab = "day", col = "red")
str(steps_per_day)
ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "sky blue", binwidth = 2000) +
labs(title="Steps Taken per Day",
x = "Steps per Day", y = "Intervals per day") + theme_bw()
ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "sky blue", binwidth = 1000) +
labs(title="Steps Taken per Day",
x = "Steps per Day", y = "Intervals per day") + theme_bw()
ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "sky blue") +
labs(title="Steps Taken per Day",
x = "Steps per Day", y = "Intervals per day") + theme_bw()
hist(step_per_day$steps, main = "Total steps by day", xlab = "day", col = "red")
steps_mean   <- mean(steps_per_day$steps, na.rm=TRUE)
steps_median <- median(steps_per_day$steps, na.rm=TRUE)
hist(StepsTotal[steps], main = "Total steps by day", xlab = "day", col = "red")
str(steps_per_day)
hist(step_per_day$steps, main = "Total steps by day", xlab = "day", col = "red")
hist(steps_per_day$steps, main = "Total steps by day", xlab = "day", col = "red")
hist(steps_per_day$steps, main = "Total steps by day", xlab = "day", col = "red")
ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "sky blue") +
labs(title="Steps Taken per Day",
x = "Steps per Day", y = "Intervals per day") + theme_bw()
hist(steps_per_day$steps, main = "Total steps by day", xlab = "day", col = "red")
steps_per_interval <- aggregate(rdata$steps,
by = list(interval = rdata$interval),
FUN=mean, na.rm=TRUE)
str()
View(steps_per_interval)
View(steps_per_day)
ggplot(steps_per_day, aes(x = steps)) +
geom_histogram(fill = "sky blue") +
labs(title="Steps Taken per Day",
x = "Number of Steps", y = "Frequency") + theme_bw()
str(steps_per_interval)
levels(steps_per_interval$interval)[steps_per_interval$interval]
x <-levels(steps_per_interval$interval)[steps_per_interval$interval]
str(x)
str(steps_per_interval)
View(rdata)
ggplot(steps_per_interval, aes(x=interval, y=steps)) +
geom_line(color="blue", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +
theme_bw()
steps_per_interval$interval <-
as.integer(levels(steps_per_interval$interval)[steps_per_interval$interval])
colnames(steps_per_interval) <- c("interval", "steps")
View(steps_per_interval)
ggplot(steps_per_interval, aes(x=interval, y=steps)) +
geom_line(color="blue", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +
theme_bw()
plot(steps_per_interval$interval, step_per_interval$steps, type = "l", xlab = "5-min interval", ylab = "Average across all Days", main = "Average number of steps taken",
col = "#CC99CC")
plot(steps_per_interval$interval, steps_per_interval$steps, type = "l", xlab = "5-min interval", ylab = "Average across all Days", main = "Average number of steps taken",
col = "#CC99CC")
plot(steps_per_interval$interval, steps_per_interval$steps, type = "l", xlab = "5-min interval", ylab = "Average across all Days", main = "Average number of steps taken",
col = "#6633FF")
activity <-rdata
View(activity)
time_series <- tapply(activity$steps, activity$interval, mean, na.rm = TRUE)
str(time_series)
plot(row.names(time_series), time_series, type = "l", xlab = "5-min interval",
ylab = "Average across all Days", main = "Average number of steps taken",
col = "red")
ggplot(steps_per_interval, aes(x=interval, y=steps)) +
geom_line(color="blue", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +
theme_bw()
max_interval <- which.max(time_series)
names(max_interval)
time_series["835"]
activity_NA <- sum(is.na(activity))
activity_NA
StepsAverage <- aggregate(steps ~ interval, data = activity, FUN = mean)
fillNA <- numeric()
for (i in 1:nrow(activity)) {
obs <- activity[i, ]
if (is.na(obs$steps)) {
steps <- subset(StepsAverage, interval == obs$interval)$steps
} else {
steps <- obs$steps
}
fillNA <- c(fillNA, steps)
}
View(StepsAverage)
new_activity$steps <- fillNA
new_activity$steps <- fill
new_activity <- activity
new_activity$steps <- fillNA
